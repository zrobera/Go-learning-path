// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "test_task_manager/Domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

type TaskRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskRepository) EXPECT() *TaskRepository_Expecter {
	return &TaskRepository_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: c, newTask
func (_m *TaskRepository) CreateTask(c context.Context, newTask domain.Task) (*domain.Task, error) {
	ret := _m.Called(c, newTask)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) (*domain.Task, error)); ok {
		return rf(c, newTask)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) *domain.Task); ok {
		r0 = rf(c, newTask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Task) error); ok {
		r1 = rf(c, newTask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type TaskRepository_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - c context.Context
//   - newTask domain.Task
func (_e *TaskRepository_Expecter) CreateTask(c interface{}, newTask interface{}) *TaskRepository_CreateTask_Call {
	return &TaskRepository_CreateTask_Call{Call: _e.mock.On("CreateTask", c, newTask)}
}

func (_c *TaskRepository_CreateTask_Call) Run(run func(c context.Context, newTask domain.Task)) *TaskRepository_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Task))
	})
	return _c
}

func (_c *TaskRepository_CreateTask_Call) Return(_a0 *domain.Task, _a1 error) *TaskRepository_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_CreateTask_Call) RunAndReturn(run func(context.Context, domain.Task) (*domain.Task, error)) *TaskRepository_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: c, taskID
func (_m *TaskRepository) DeleteTask(c context.Context, taskID string) error {
	ret := _m.Called(c, taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepository_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type TaskRepository_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - c context.Context
//   - taskID string
func (_e *TaskRepository_Expecter) DeleteTask(c interface{}, taskID interface{}) *TaskRepository_DeleteTask_Call {
	return &TaskRepository_DeleteTask_Call{Call: _e.mock.On("DeleteTask", c, taskID)}
}

func (_c *TaskRepository_DeleteTask_Call) Run(run func(c context.Context, taskID string)) *TaskRepository_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskRepository_DeleteTask_Call) Return(_a0 error) *TaskRepository_DeleteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepository_DeleteTask_Call) RunAndReturn(run func(context.Context, string) error) *TaskRepository_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskByID provides a mock function with given fields: c, taskID
func (_m *TaskRepository) GetTaskByID(c context.Context, taskID string) (*domain.Task, error) {
	ret := _m.Called(c, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Task, error)); ok {
		return rf(c, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Task); ok {
		r0 = rf(c, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_GetTaskByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskByID'
type TaskRepository_GetTaskByID_Call struct {
	*mock.Call
}

// GetTaskByID is a helper method to define mock.On call
//   - c context.Context
//   - taskID string
func (_e *TaskRepository_Expecter) GetTaskByID(c interface{}, taskID interface{}) *TaskRepository_GetTaskByID_Call {
	return &TaskRepository_GetTaskByID_Call{Call: _e.mock.On("GetTaskByID", c, taskID)}
}

func (_c *TaskRepository_GetTaskByID_Call) Run(run func(c context.Context, taskID string)) *TaskRepository_GetTaskByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskRepository_GetTaskByID_Call) Return(_a0 *domain.Task, _a1 error) *TaskRepository_GetTaskByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_GetTaskByID_Call) RunAndReturn(run func(context.Context, string) (*domain.Task, error)) *TaskRepository_GetTaskByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasks provides a mock function with given fields: c
func (_m *TaskRepository) GetTasks(c context.Context) ([]domain.Task, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Task, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Task); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type TaskRepository_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
//   - c context.Context
func (_e *TaskRepository_Expecter) GetTasks(c interface{}) *TaskRepository_GetTasks_Call {
	return &TaskRepository_GetTasks_Call{Call: _e.mock.On("GetTasks", c)}
}

func (_c *TaskRepository_GetTasks_Call) Run(run func(c context.Context)) *TaskRepository_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TaskRepository_GetTasks_Call) Return(_a0 []domain.Task, _a1 error) *TaskRepository_GetTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_GetTasks_Call) RunAndReturn(run func(context.Context) ([]domain.Task, error)) *TaskRepository_GetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function with given fields: c, taskID, updatedTask
func (_m *TaskRepository) UpdateTask(c context.Context, taskID string, updatedTask domain.Task) (*domain.Task, error) {
	ret := _m.Called(c, taskID, updatedTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Task) (*domain.Task, error)); ok {
		return rf(c, taskID, updatedTask)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Task) *domain.Task); ok {
		r0 = rf(c, taskID, updatedTask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Task) error); ok {
		r1 = rf(c, taskID, updatedTask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type TaskRepository_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - c context.Context
//   - taskID string
//   - updatedTask domain.Task
func (_e *TaskRepository_Expecter) UpdateTask(c interface{}, taskID interface{}, updatedTask interface{}) *TaskRepository_UpdateTask_Call {
	return &TaskRepository_UpdateTask_Call{Call: _e.mock.On("UpdateTask", c, taskID, updatedTask)}
}

func (_c *TaskRepository_UpdateTask_Call) Run(run func(c context.Context, taskID string, updatedTask domain.Task)) *TaskRepository_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(domain.Task))
	})
	return _c
}

func (_c *TaskRepository_UpdateTask_Call) Return(_a0 *domain.Task, _a1 error) *TaskRepository_UpdateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_UpdateTask_Call) RunAndReturn(run func(context.Context, string, domain.Task) (*domain.Task, error)) *TaskRepository_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
