// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "test_task_manager/Domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: c, user
func (_m *UserRepository) CreateUser(c context.Context, user domain.User) error {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - c context.Context
//   - user domain.User
func (_e *UserRepository_Expecter) CreateUser(c interface{}, user interface{}) *UserRepository_CreateUser_Call {
	return &UserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", c, user)}
}

func (_c *UserRepository_CreateUser_Call) Run(run func(c context.Context, user domain.User)) *UserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.User))
	})
	return _c
}

func (_c *UserRepository_CreateUser_Call) Return(_a0 error) *UserRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRepository_CreateUser_Call) RunAndReturn(run func(context.Context, domain.User) error) *UserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUsername provides a mock function with given fields: c, username
func (_m *UserRepository) FindByUsername(c context.Context, username string) (*domain.User, error) {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for FindByUsername")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(c, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_FindByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUsername'
type UserRepository_FindByUsername_Call struct {
	*mock.Call
}

// FindByUsername is a helper method to define mock.On call
//   - c context.Context
//   - username string
func (_e *UserRepository_Expecter) FindByUsername(c interface{}, username interface{}) *UserRepository_FindByUsername_Call {
	return &UserRepository_FindByUsername_Call{Call: _e.mock.On("FindByUsername", c, username)}
}

func (_c *UserRepository_FindByUsername_Call) Run(run func(c context.Context, username string)) *UserRepository_FindByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_FindByUsername_Call) Return(_a0 *domain.User, _a1 error) *UserRepository_FindByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_FindByUsername_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *UserRepository_FindByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: c
func (_m *UserRepository) GetUsers(c context.Context) ([]domain.User, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.User, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.User); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type UserRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - c context.Context
func (_e *UserRepository_Expecter) GetUsers(c interface{}) *UserRepository_GetUsers_Call {
	return &UserRepository_GetUsers_Call{Call: _e.mock.On("GetUsers", c)}
}

func (_c *UserRepository_GetUsers_Call) Run(run func(c context.Context)) *UserRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserRepository_GetUsers_Call) Return(_a0 []domain.User, _a1 error) *UserRepository_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUsers_Call) RunAndReturn(run func(context.Context) ([]domain.User, error)) *UserRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// PromoteUser provides a mock function with given fields: c, username
func (_m *UserRepository) PromoteUser(c context.Context, username string) (*domain.User, error) {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(c, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_PromoteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PromoteUser'
type UserRepository_PromoteUser_Call struct {
	*mock.Call
}

// PromoteUser is a helper method to define mock.On call
//   - c context.Context
//   - username string
func (_e *UserRepository_Expecter) PromoteUser(c interface{}, username interface{}) *UserRepository_PromoteUser_Call {
	return &UserRepository_PromoteUser_Call{Call: _e.mock.On("PromoteUser", c, username)}
}

func (_c *UserRepository_PromoteUser_Call) Run(run func(c context.Context, username string)) *UserRepository_PromoteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_PromoteUser_Call) Return(_a0 *domain.User, _a1 error) *UserRepository_PromoteUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_PromoteUser_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *UserRepository_PromoteUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
